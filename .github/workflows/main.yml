name: CMake
on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  PICO_SDK_PATH: /usr/local/share/pico/pico-sdk
  FREERTOS_KERNEL_PATH: /usr/local/share/pico/FreeRTOS-Kernel
  UNITY_PATH: /usr/local/share/pico/Unity
  OPENOCD_PATH: /usr/share/openocd
  PICO_TOOLCHAIN_PATH: /usr/bin

jobs:
  build:
    runs-on: [self-hosted, linux, x64]
    steps:
      - name: Clean workspace
        run: |
          echo "Cleaning up previous run"
          rm -rf "${{ github.workspace }}"
          mkdir -p "${{ github.workspace }}"

      - uses: actions/checkout@v3
        with:
          path: ${{github.workspace}}/source

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        working-directory: ${{github.workspace}}
        run:  cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -B ./build ./source

      - name: Build
        working-directory: ${{github.workspace}}
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build ./build --config $BUILD_TYPE --parallel $(nproc)

      - name: Flash
        # This follows the convention of where we put tests, but it can be anything
        working-directory: ${{github.workspace}}/build/test
        shell: bash
        # Make sure to set the correct elf file
        run: openocd -s $OPENOCD_PATH -f interface/cmsis-dap.cfg -f target/rp2040.cfg -c 'adapter speed 5000; program "mytest.elf" verify reset exit'
      - name: Test
        working-directory: ${{github.workspace}}
        shell: bash
        run: python3 /usr/local/share/pico/unity_checker.py
